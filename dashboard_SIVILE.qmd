---
title: "Reporte Epidemiológico SI.VI.LE 2024"
author: Instituto Nacional de Epidemiología "Dr. J. H. Jara"
format: 
    dashboard:
        orientation: columns
        vertical_layout: fill
        logo: logo.svg
        nav-buttons: 
          - icon: github
            href: https://github.com/datos-ine/dashboard_SIVILE
        theme: custom.scss
server: shiny
---

```{r}
#| context: setup
## Cargar paquetes
pacman::p_load(
  # Interactividad
  shiny,
  shinyWidgets,
  # Mapas
  sf,
  geoAr,
  leaflet,
  # Gráficos
  cols4all,
  BAMMtools,
  apyramid,
  # Tablas
  DT,
  # Manejo de datos
  rio,
  janitor,
  tidyverse
)


## Cargar configuración de idioma para las tablas
source("data_table_es.R")


## Cargar dataset SIVILE
datos <- import("datos_sivile_2024_clean.csv") |>

  # Convertir variables a factor
  mutate(across(
    .cols = c(codigo_institucion_id, sexo, grupo_edad, prov_lesion_cat),
    .fns = ~ factor(.x)
  )) |>

  # Variables caracter a factor
  mutate(across(
    .cols = c(
      ocupacion_cat,
      educacion_cat,
      mecanismo_cat:contraparte,
      lugar_lesion,
      intencionalidad_cat:contexto_agresion,
      egreso,
      nat_lesion
    ),
    .fns = ~ 
  ))
```

 # UCL
  
## Valuebox {width="30%"}
  
  ```{r}
#| content: valuebox
#| title: UCL SIVILE activas
#| icon: hospital
#| color: primary
list(value = nlevels(datos$codigo_institucion_id))
```

```{r}
#| content: valuebox
#| title: Registros totales
#| icon: file-text
n_total <- read_delim(
  "../raw/export_Sistema_de_Vigilancia_de_Lesiones_SIVILE_Completo_2024.txt"
) |>
  nrow()

list(value = n_total)
```

```{r}
#| content: valuebox
#| title: Registros válidos
#| icon: file-text
#| color: warning
list(
  value = nrow(datos)
)
```

## Tabla UCL {width="70%"}

```{r}
#| id: Tabla frecuencia x UCL
## Crear tabla de frecuencia
tabyl(datos, codigo_institucion_id) |>
  adorn_pct_formatting(digits = 2) |>
  # Hacer interactiva
  datatable(
    colnames = c("UCL", "Frecuencia", "%"),
    rownames = FALSE,
    autoHideNavigation = TRUE,
    options = list(
      searching = FALSE,
      language = dt_lang_es
    )
  )
```

# Provincia

## Mapa interactivo

::: card
```{r}
#| id: Mapa interactivo
## Capa con centroides por provincia
shp_arg <- datos |>
  tabyl(prov_lesion, sexo) |>
  adorn_totals(where = "col") |>

  # Añadir centroides provincias
  left_join(get_provincias(), by = join_by("prov_lesion" == "nombre")) |>

  # Convertir a puntos
  st_as_sf(coords = c(x = "centroide_lon", y = "centroide_lat"), crs = 4326)


## Paleta personalizada
pal <- colorBin(
  palette = c4a(palette = "icefire"),
  domain = shp_arg$Total,
  bins = getJenksBreaks(shp_arg$Total, k = 10)
)

## Crear mapa interactivo
shp_arg |>
  leaflet(options = leafletOptions(minZoom = 3, maxZoom = 6)) |>
  # Capa base Argentina
  addArgTiles() |>

  # Zoom inicial
  setView(
    lng = -64.9673, # centro aproximado de Argentina
    lat = -34.9965,
    zoom = 3
  ) |>

  # Total por provincia
  addCircleMarkers(
    color = ~ pal(Total),
    fillOpacity = .5,
    stroke = FALSE,
    radius = ~ scales::rescale(sqrt(Total), c(5, 15)),
    group = "Total"
  ) |>

  # Total por provincia (mujeres)
  addCircleMarkers(
    color = ~ pal(Femenino),
    fillOpacity = .5,
    stroke = FALSE,
    radius = ~ scales::rescale(sqrt(Femenino), c(6, 10)),
    group = "Mujeres"
  ) |>

  # Total por provincia (varones)
  addCircleMarkers(
    color = ~ pal(Masculino),
    fillOpacity = .5,
    stroke = FALSE,
    radius = ~ scales::rescale(sqrt(Masculino), c(6, 10)),
    group = "Varones"
  ) |>

  # Leyenda
  addLegend(
    title = "Frecuencia",
    pal = pal,
    values = shp_arg$Total
  ) |>

  # Control de capas
  addLayersControl(
    overlayGroups = c("Total", "Mujeres", "Varones")
  ) |>
  hideGroup(group = c("Mujeres", "Varones"))
```

Capas GIS obtenidas de [geoAr: Argentina’s Spatial Data Toolbox](https://github.com/PoliticaArgentina/geoAr)
:::

## Tabla

```{r}
#| context: server
#| id: Tabla x provincia
## Datos para la tabla
datos_prov <- datos |>
  select(
    Provincia = prov_lesion,
    Sexo = sexo,
    Edad = grupo_edad,
    Intencionalidad = intencionalidad_cat
  )


## Tabla interactiva
output$tab_prov <- renderDT({
  req(datos_prov)

  # Definir estratos: por defecto mostrar Provincia
  estratos <- input$vars
  if (is.null(estratos) || length(estratos) == 0) {
    estratos <- NULL
  }

  # Construir tabla
  tabla <- datos_prov |>
    count(Provincia, across(all_of(estratos)), name = "Frecuencia") |>
    mutate(
      "%" = scales::percent(
        Frecuencia / sum(Frecuencia, na.rm = TRUE),
        accuracy = 0.01
      ),
      .by = Provincia
    ) |>
    arrange(-Frecuencia)

  # Si solo hay Provincia, agregar fila de totales
  if (is.null(estratos)) {
    tabla <- datos_prov |>
      count(Provincia, name = "Frecuencia") |>
      mutate(
        "%" = scales::percent(
          Frecuencia / sum(Frecuencia, na.rm = TRUE),
          accuracy = 0.01
        )
      ) |>
      arrange(-Frecuencia)
  }

  # Mostrar DT
  datatable(
    tabla,
    options = list(
      autoWidth = TRUE,
      searching = FALSE,
      language = dt_lang_es
    ),
    rownames = FALSE,
    selection = "single"
  )
})
```

### Tabla

```{r}
#| content: card-toolbar
awesomeCheckboxGroup(
  inputId = "vars",
  label = "Estratos:",
  choices = c("Sexo", "Edad", "Intencionalidad"),
  status = "warning"
)
```

```{r}
DTOutput("tab_prov")
```

# Gráficos
##

```{r}
#| content: card-sidebar
# Variable
selectInput(inputId = "var", label = "Variable", choices = NULL)

# Estrato
selectInput(inputId = "estrato", label = "Estratificar por", choices = NULL)

# Paleta
selectInput(
  inputId = "palette",
  label = "Paleta de colores",
  choices = c("Tokyo" = "scico.tokyo", "Icefire" = "icefire", "Magma" = "magma")
)
```

```{r}
plotOutput("pyramid_plot")
```

```{r}
#| context: server
## Datos para el gráfico
datos_plot <- datos |>
  # Seleccionar variables
  select(
    Sexo = sexo,
    Edad = grupo_edad,
    Educación = nivel_instruccion_cat,
    Empleo = sit_laboral_cat,
    Mecanismo = mecanismo_cat,
    Intencionalidad = intencionalidad_cat,
    Egreso = egreso_cat
  )


# Actualizar selectInput dinámicamente
observe({
  vars <- names(datos_plot)
  updateSelectInput(session, "var", choices = vars, selected = "Edad")
  updateSelectInput(session, "estrato", choices = vars, selected = NULL)
})

# Renderizar gráfico
output$pyramid_plot <- renderPlot({
  req(input$var, input$estrato)

  age_pyramid(
    data = datos_plot,
    age = input$var,
    split = input$estrato
  ) +
    scale_fill_discrete_c4a_cat(palette = input$palette) +
    theme_minimal()
})
```

<!-- # Datos

```{r}
datos |>
  select(
    UCL = codigo_institucion_id,
    Sexo = sexo,
    Edad = grupo_edad,
    "Nivel educativo" = nivel_instruccion_cat,
    "Situación laboral" = sit_laboral_cat,
    "Provincia lesión" = prov_lesion,
    Mecanismo = mecanismo_cat,
    Intencionalidad = intencionalidad_cat,
    "Relación con agresor" = rel_vict_agresor,
    "Sexo agresor" = sexo_agresor,
    Contexto = contexto_agresion_cat,
    SPG,
    "Tipo egreso" = egreso_cat
  ) |>
  datatable(rownames = FALSE, options = list(language = dt_lang_es))
``` -->