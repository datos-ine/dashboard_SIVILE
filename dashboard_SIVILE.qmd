---
title: "Reporte Epidemiológico SI.VI.LE 2024"
author: Instituto Nacional de Epidemiología "Dr. J. H. Jara"
format: 
    dashboard:
        orientation: columns
        vertical_layout: fill
        logo: logo.svg
        theme: custom.scss
server: shiny
---

```{r}
#| context: setup
## Cargar paquetes
pacman::p_load(
  # Interactividad
  shiny,
  shinyWidgets,
  # Mapas
  sf,
  geoAr,
  leaflet,
  # Gráficos
  cols4all,
  BAMMtools,
  apyramid,
  # Tablas
  DT,
  # Manejo de datos
  rio,
  janitor,
  tidyverse
)

## Cargar configuración de idioma para las tablas
source("data_table_es.R")

## Cargar dataset SIVILE
datos <- import("datos_sivile_2024_clean.csv") |>

  # Convertir variables a factor
  mutate(across(
    .cols = c(codigo_institucion_id, sexo, grupo_edad, prov_lesion_cat),
    .fns = ~ factor(.x)
  )) |>

  # Cambiar orden nivel "Otro/desconocido"
  mutate(across(
    .cols = c(
      ocupacion_cat,
      mecanismo_cat,
      lugar_lesion,
      intencionalidad_cat,
      nat_lesion
    ),
    .fns = ~ fct_relevel(.x, "Otro/desconocido", after = Inf)
  )) |>

  # Cambiar orden nivel "Desconocido"
  mutate(across(
    .cols = c(
      educacion_cat,
      sexo_agresor,
      egreso
    ),
    .fns = ~ fct_relevel(.x, "Desconocido", after = Inf)
  )) |>

  # Cambiar orden nivel "Desconocido"
  mutate(across(
    .cols = c(
      cond_lesionado,
      modo_transporte,
      contraparte,
      rel_agresor,
      contexto_agresion
    ),
    .fns = ~ fct_relevel(.x, "Otro", after = Inf)
  )) |>

  # Renombrar columnas
  rename(
    UCL = codigo_institucion_id,
    Provincia = prov_lesion_cat,
    Sexo = sexo,
    Edad = grupo_edad,
    Educación = educacion_cat,
    Ocupación = ocupacion_cat,
    Mecanismo = mecanismo_cat,
    Naturaleza = nat_lesion,
    Intencionalidad = intencionalidad_cat,
    SPG = spg,
    Desenlace = egreso
  )
```

# UCL

## Valuebox {width="30%"}

```{r}
#| content: valuebox
#| title: UCL SIVILE activas
#| icon: hospital
#| color: primary
list(value = nlevels(datos$UCL))
```

```{r}
#| content: valuebox
#| title: Registros totales
#| icon: file-text
n_total <- read_delim(
  "../raw/export_Sistema_de_Vigilancia_de_Lesiones_SIVILE_Completo_2024.txt"
) |>
  nrow()

list(value = n_total)
```

```{r}
#| content: valuebox
#| title: Registros válidos
#| icon: file-text
#| color: warning
list(
  value = nrow(datos)
)
```

## Tabla UCL {width="70%"}

```{r}
#| id: Tabla frecuencia x UCL
## Crear tabla de frecuencia
datatable(
  tabyl(datos, UCL) |>
    adorn_pct_formatting(digits = 2) |>
    arrange(-n),
  colnames = c("UCL", "Frecuencia", "%"),
  rownames = FALSE,
  options = list(
    searching = FALSE,
    language = dt_lang_es
  )
)
```

# Provincia

## Mapa interactivo

::: card
```{r}
#| id: Mapa interactivo
## Capa con centroides por provincia
shp_arg <- datos |>
  tabyl(Provincia, Sexo) |>
  adorn_totals(where = "col") |>

  # Añadir centroides provincias
  left_join(
    get_provincias(),
    by = join_by("Provincia" == "nombre")
  ) |>

  # Convertir a puntos
  st_as_sf(
    coords = c(x = "centroide_lon", y = "centroide_lat"),
    crs = 4326
  )

## Paleta personalizada
pal <- colorNumeric(
  palette = c4a(palette = "icefire"),
  domain = c(0, shp_arg$Total)
)

## Crear mapa interactivo
shp_arg |>
  leaflet(options = leafletOptions(minZoom = 3, maxZoom = 6)) |>
  # Capa base Argentina
  addArgTiles() |>

  # Zoom inicial
  setView(
    lng = -64.9673, # centro aproximado de Argentina
    lat = -34.9965,
    zoom = 3
  ) |>

  # Total por provincia
  addCircleMarkers(
    color = ~ pal(Total),
    fillOpacity = .5,
    stroke = FALSE,
    radius = ~ scales::rescale(sqrt(Total), c(5, 15)),
    group = "Total"
  ) |>

  # Total por provincia (mujeres)
  addCircleMarkers(
    color = ~ pal(Femenino),
    fillOpacity = .5,
    stroke = FALSE,
    radius = ~ scales::rescale(sqrt(Femenino), c(6, 10)),
    group = "Mujeres"
  ) |>

  # Total por provincia (varones)
  addCircleMarkers(
    color = ~ pal(Masculino),
    fillOpacity = .5,
    stroke = FALSE,
    radius = ~ scales::rescale(sqrt(Masculino), c(6, 10)),
    group = "Varones"
  ) |>

  # Leyenda
  addLegend(
    title = "Frecuencia",
    pal = pal,
    values = shp_arg$Total
  ) |>

  # Control de capas
  addLayersControl(
    overlayGroups = c("Total", "Mujeres", "Varones")
  ) |>
  hideGroup(group = c("Mujeres", "Varones"))
```

Capas GIS obtenidas de [geoAr: Argentina’s Spatial Data Toolbox](https://github.com/PoliticaArgentina/geoAr)
:::

## Tabla

```{r}
#| id: Selector de variables
var_sel <- dropdownButton(
  status = "warning",
  right = TRUE,
  selectizeInput(
    inputId = "vars",
    label = "Estratificar por:",
    choices = c("Sexo", "Edad", "Intencionalidad", "Desenlace"),
    multiple = TRUE,
    options = list(placeholder = "Seleccionar variable/s")
  )
)
```

```{r}
#| context: server
#| id: Tabla frecuencia por provincia
output$tab_prov <- renderDT({
  req(datos)

  # Limitar variables a las elegibles
  vars <- c("Sexo", "Edad", "Intencionalidad", "Desenlace")
  estratos <- input$vars
  estratos <- intersect(estratos, vars) # filtra lo que elijan

  if (length(estratos) == 0) {
    # Sólo Provincia
    tabla <- datos |>
      count(Provincia, name = "Frecuencia") |>
      mutate(
        "%" = scales::percent(
          Frecuencia / sum(Frecuencia, na.rm = TRUE),
          accuracy = 0.01
        )
      )
  } else {
    # Provincia + variables adicionales
    tabla <- datos |>
      count(Provincia, across(all_of(estratos)), name = "Frecuencia") |>
      mutate(
        "%" = scales::percent(
          Frecuencia / sum(Frecuencia, na.rm = TRUE),
          accuracy = 0.01
        ),
        .by = Provincia
      )
  }

  datatable(
    tabla,
    options = list(
      autoWidth = TRUE,
      searching = FALSE,
      language = dt_lang_es
    ),
    rownames = FALSE,
    selection = "single"
  )
})
```

```{r}
var_sel
DTOutput("tab_prov")
```

# Gráficos
##

```{r}
#| content: card-sidebar
# Variable
selectInput(inputId = "var", label = "Variable", choices = c("Edad", "Sexo"))

# Estrato
selectInput(inputId = "estrato", label = "Estratificar por", choices = NULL)

# Paleta
selectInput(
  inputId = "palette",
  label = "Paleta de colores",
  choices = c(
    "Tokyo" = "scico.tokyo",
    "Icefire" = "-icefire",
    "Magma" = "magma"
  )
)

# Proporción
prettyRadioButtons(
  inputId = "prop",
  label = "Mostrar porcentajes",
  choices = c("Sí" = TRUE, "No" = FALSE)
)

```

```{r}
plotOutput("pyramid_plot")
```

```{r}
#| context: server
# Actualizar selectInput dinámicamente
observe({
  vars <- c(
    "Edad",
    "Sexo",
    "Educación",
    "Ocupación",
    "Mecanismo",
    "Naturaleza",
    "Intencionalidad",
    "Desenlace"
  )
  updateSelectInput(session, "var", choices = vars[1:2], selected = "Edad")
  updateSelectInput(session, "estrato", choices = vars[-1], selected = NULL)
})

# Renderizar gráfico
output$pyramid_plot <- renderPlot({
  req(input$var, input$estrato, input$prop)

  age_pyramid(
    data = datos,
    age = input$var,
    split = input$estrato,
    proportional = input$prop
  ) +
    scale_fill_discrete_c4a_cat(palette = input$palette) +
    theme_minimal()
})
```
