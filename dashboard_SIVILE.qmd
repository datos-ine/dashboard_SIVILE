---
title: "Reporte Epidemiológico SI.VI.LE 2024"
author: Instituto Nacional de Epidemiología "Dr. J. H. Jara"
format: 
    dashboard:
        orientation: columns
        vertical_layout: fill
        logo: logo.svg
        theme: custom.scss
server: shiny
---

```{r}
#| context: setup
## Cargar paquetes
pacman::p_load(
  # Interactividad
  shiny,
  shinyWidgets,
  # Mapas
  sf,
  geoAr,
  leaflet,
  # Gráficos
  cols4all,
  BAMMtools,
  apyramid,
  # Tablas
  DT,
  # Manejo de datos
  rio,
  janitor,
  tidyverse
)

## Cargar configuración de idioma para las tablas
source("data_table_es.R")

## Cargar dataset SIVILE
datos <- import("datos_sivile_2024_clean.csv") |>

  # Convertir variables a factor
  mutate(across(
    .cols = c(codigo_institucion_id, sexo, grupo_edad, prov_lesion_cat),
    .fns = ~ factor(.x)
  )) |>

  # Cambiar orden nivel "Otro/desconocido"
  mutate(across(
    .cols = c(
      ocupacion_cat,
      mecanismo_cat,
      lugar_lesion,
      intencionalidad_cat,
      nat_lesion
    ),
    .fns = ~ fct_relevel(.x, "Otro/desconocido", after = Inf)
  )) |>

  # Cambiar orden nivel "Desconocido"
  mutate(across(
    .cols = c(
      educacion_cat,
      sexo_agresor,
      egreso
    ),
    .fns = ~ fct_relevel(.x, "Desconocido", after = Inf)
  )) |>

  # Cambiar orden nivel "Desconocido"
  mutate(across(
    .cols = c(
      cond_lesionado,
      modo_transporte,
      contraparte,
      rel_agresor,
      contexto_agresion
    ),
    .fns = ~ fct_relevel(.x, "Otro", after = Inf)
  )) |>

  # Renombrar columnas
  rename(
    UCL = codigo_institucion_id,
    Provincia = prov_lesion_cat,
    Sexo = sexo,
    Edad = grupo_edad,
    Educación = educacion_cat,
    Ocupación = ocupacion_cat,
    Mecanismo = mecanismo_cat,
    Naturaleza = nat_lesion,
    Intencionalidad = intencionalidad_cat,
    SPG = spg,
    Desenlace = egreso
  )

## Dataset para lesiones por tránsito
datos_tr <- datos |>
  filter(mecanismo_id == 1) |>
  select(
    Mes = mes_anio_lesion,
    Sexo,
    Edad,
    `Ocupación`,
    `Educación`,
    Provincia,
    Condición = cond_lesionado,
    Transporte = modo_transporte,
    Contraparte = contraparte,
    "Cinturón seguridad" = cinturon_seguridad,
    "Chaleco reflectante" = chaleco_reflectante,
    "Asiento niños" = asiento_ninos,
    Casco = casco_transporte,
    SPG,
    Desenlace
  )
```

# UCL

## Valuebox {width="30%"}

```{r}
#| content: valuebox
#| title: UCL SIVILE activas
#| icon: hospital
#| color: primary
list(value = nlevels(datos$UCL))
```

```{r}
#| content: valuebox
#| title: Registros totales
#| icon: file-text
n_total <- read_delim(
  "../raw/export_Sistema_de_Vigilancia_de_Lesiones_SIVILE_Completo_2024.txt"
) |>
  nrow()

list(value = n_total)
```

```{r}
#| content: valuebox
#| title: Registros válidos (*)
#| icon: file-text
#| color: warning
list(
  value = nrow(datos)
)
```

::: {.card expandable="false" fill="false"}
<div style="font-size:0.7rem;">
(*) Datos completos para sexo, edad, provincia de ocurrencia e intencionalidad
</div>
:::

## Tabla UCL {width="70%"}

```{r}
#| id: Tabla frecuencia x UCL
## Crear tabla de frecuencia
tab1 <- tabyl(datos, UCL) |>
  adorn_pct_formatting(digits = 2) |>
  arrange(-n)

# Hacer interactiva
datatable(
  tab1,
  colnames = c("UCL", "N", "%"),
  rownames = FALSE,
  options = list(
    searching = FALSE,
    language = dt_lang_es
  )
)
```

# Provincia

## Mapa interactivo
::: {.card}
```{r}
#| id: Mapa interactivo
## Capa con centroides por provincia
shp_arg <- datos |>
  tabyl(Provincia, Sexo) |>
  adorn_totals(where = "col") |>

  # Añadir centroides provincias
  left_join(
    get_provincias(),
    by = join_by("Provincia" == "nombre")
  ) |>

  # Convertir a puntos
  st_as_sf(
    coords = c(x = "centroide_lon", y = "centroide_lat"),
    crs = 4326
  )

## Paleta personalizada
pal <- colorNumeric(
  palette = c4a(palette = "icefire"),
  domain = c(0, shp_arg$Total)
)


## Crear mapa interactivo
mapa <- shp_arg |>
  leaflet(options = leafletOptions(minZoom = 3, maxZoom = 6)) |>
  # Capa base Argentina
  addArgTiles() |>

  # Zoom inicial
  setView(
    lng = -64.9673, # centro aproximado de Argentina
    lat = -34.9965,
    zoom = 3
  ) |>

  # Total por provincia
  addCircleMarkers(
    color = ~ pal(Total),
    fillOpacity = .5,
    stroke = FALSE,
    radius = ~ scales::rescale(sqrt(Total), c(5, 15)),
    group = "Total"
  ) |>

  # Total por provincia (mujeres)
  addCircleMarkers(
    color = ~ pal(Femenino),
    fillOpacity = .5,
    stroke = FALSE,
    radius = ~ scales::rescale(sqrt(Femenino), c(6, 10)),
    group = "Mujeres"
  ) |>

  # Total por provincia (varones)
  addCircleMarkers(
    color = ~ pal(Masculino),
    fillOpacity = .5,
    stroke = FALSE,
    radius = ~ scales::rescale(sqrt(Masculino), c(6, 10)),
    group = "Varones"
  ) |>

  # Leyenda
  addLegend(
    title = "Frecuencia",
    pal = pal,
    values = shp_arg$Total
  ) |>

  # Control de capas
  addLayersControl(
    overlayGroups = c("Total", "Mujeres", "Varones")
  ) |>
  hideGroup(group = c("Mujeres", "Varones"))

## Mostrar mapa
mapa
```

<div style="font-size:0.7rem;">
Capas GIS obtenidas de Ruiz Nicolini J, Del Boca P, Juara J (2024). [_geoAr: Argentina's Spatial Data Toolbox_. doi:10.32614/CRAN.package.geoAr](https://github.com/PoliticaArgentina/geoAr)
</div>
:::

## Tabla

```{r}
#| id: Selector de variables
var_sel <- dropdownButton(
  status = "warning",
  right = TRUE,
  selectizeInput(
    inputId = "vars",
    label = "Estratificar por:",
    choices = c("Sexo", "Edad", "Intencionalidad", "Desenlace"),
    multiple = TRUE,
    options = list(placeholder = "Seleccionar variable/s")
  )
) |>
  htmltools::div(style = "position:fixed; top:75px; right:50px; z-index:1000;")

```

```{r}
#| context: server
#| id: Tabla frecuencia por provincia
output$tab_prov <- renderDT({
  req(datos)

  # Limitar variables a las elegibles
  vars <- c("Sexo", "Edad", "Intencionalidad", "Desenlace")
  estratos <- input$vars
  estratos <- intersect(estratos, vars) # filtra lo que elijan

  if (length(estratos) == 0) {
    # Sólo Provincia
    tab2 <- datos |>
      count(Provincia, name = "N") |>
      mutate(
        "%" = N / sum(N, na.rm = TRUE)
      )
  } else {
    # Provincia + variables adicionales
    tab2 <- datos |>
      count(Provincia, across(all_of(estratos)), name = "N") |>
      mutate(
        "%" = N / sum(N, na.rm = TRUE),
        .by = Provincia
      )
  }

  # Renderizar la tabla
  datatable(
    tab2,
    options = list(
      autoWidth = FALSE,
      searching = FALSE,
      info = FALSE,
      dom = 'ftlp',
      language = dt_lang_es
    ),
    rownames = FALSE,
    filter = "top",
    selection = "single"
  ) |>
    formatPercentage(columns = "%", digits = 2) # mostrar como %
})
```

```{r}
## Cargar selector de estratos
var_sel

## Cargar tabla
DTOutput("tab_prov")
```

# Gráficos
```{r}
#| context: server
# Actualizar selectInput dinámicamente
observe({
  vars <- c(
    "Edad",
    "Sexo",
    "Educación",
    "Ocupación",
    "Mecanismo",
    "Naturaleza",
    "Intencionalidad",
    "Desenlace"
  )
  updateSelectInput(session, "var", choices = vars[1:2], selected = "Edad")
  updateSelectInput(session, "estrato", choices = vars[-1], selected = NULL)
})

# Renderizar gráfico
output$pyramid_plot <- renderPlot({
  req(input$var, input$estrato, input$prop)

  # Gráfico de pirámide
  age_pyramid(
    data = datos,
    age = input$var,
    split = input$estrato,
    proportional = input$prop
  ) +
    # Cambiar formato
    scale_fill_discrete_c4a_cat(palette = input$palette) +
    labs(y = "Frecuencia") +
    theme_minimal()
})
```

```{r}
#| content: card-toolbar
#| id: Selector de estratos
## Variable
selectInput(inputId = "var", label = "Variable", choices = c("Edad", "Sexo"))

## Estrato
selectInput(inputId = "estrato", label = "Estratificar por", choices = NULL)

## Paleta de colores
selectInput(
  inputId = "palette",
  label = "Paleta de colores",
  choices = c(
    "Managua" = "scico.managua",
    "Nightfall" = "tol.nightfall",
    "RedBlue" = "tableau.red_blue_diverging",
    "Viridis" = "viridis"
  )
)

## Mostrar como proporción
prettyRadioButtons(
  inputId = "prop",
  label = "Mostrar como porcentaje",
  choices = c("Sí" = TRUE, "No" = FALSE)
)
```

```{r}
plotOutput("pyramid_plot")
```

# Tránsito

```{r}
#| context: server
output$tabla_tr <- renderDT({
  req(datos_tr, input$var_x)

  x <- input$var_x
  y <- input$var_y

  tab3 <- datos_tr |>
    count(across(all_of(c(x, y))), name = "N") |>
    mutate("%" = N / sum(N, na.rm = TRUE), .by = all_of(x))

  datatable(
    tab3,
    options = list(
      autoWidth = FALSE,
      searching = FALSE,
      info = FALSE,
      dom = 'ftlp',
      language = dt_lang_es
    ),
    rownames = FALSE,
    filter = "top",
    selection = "single"
  ) |>
    formatPercentage(columns = "%", digits = 2)
})

# Gráfico dinámico
output$plot_tr <- renderPlot({
  req(datos_tr, input$var_x)

  x <- input$var_x
  y <- input$var_y

  datos_plot <- datos_tr |>
    count(across(all_of(c(x, y)))) |>
    drop_na() |>
    mutate(pct = n / sum(n, na.rm = TRUE), .by = all_of(x))

  # Gráfico
  datos_plot |>
    ggplot(aes(x = .data[[x]], y = pct, fill = .data[[y]])) +
    geom_col(position = input$pos) + # Columnas
    scale_fill_discrete_c4a_cat(palette = input$palette) + # Paleta de colores
    labs(x = x, y = "Frecuencia", fill = y) + # Etiquetas ejes
    theme_minimal() + # Tema
    theme(axis.text.x = element_text(angle = 45))
})
```

##

```{r}
#| content: card-toolbar
#| id: Selector de estratos tránsito
## Eje X
selectInput(
  inputId = "var_x",
  label = "X",
  choices = c("Mes", "Sexo", "Edad", "Transporte")
)

## Eje Y
selectInput(
  inputId = "var_y",
  label = "Y",
  choices = names(datos_tr)[-1]
)

## Paleta de colores
selectInput(
  inputId = "palette",
  label = "Paleta de colores",
  choices = c(
    "Managua" = "scico.managua",
    "Nightfall" = "tol.nightfall",
    "RedBlue" = "tableau.red_blue_diverging",
    "Viridis" = "viridis"
  ),
  selected = "viridis"
)

## Tipo de barras
prettyRadioButtons(
  inputId = "pos",
  label = "Posición barras",
  status = "warning",
  choices = c(
    "Agrupadas" = "stack",
    "Separadas" = "dodge"
  )
)
```

```{r}
#| layout-ncol: 2
## Tabla
DTOutput("tabla_tr")

## Gráfico
plotOutput("plot_tr")
```